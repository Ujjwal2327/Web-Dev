JS [DOM MANIPULATION + MODERN JS] - CLASS 1
window
    global object / top level entity created by browser
    represents a browser window
    all other objects and everything lies inside it

DOM
    document object model
    object representing all html code

BOM
    browser object model
    to communicate with browser about matter other than content of page
    ex - alert, location, history

sequence of characters -> tags (if enclosed in <>) -> tokens (by tokenizer) -> nodes -> dom gets ready

document.getElementById('idName')
    returns a single object having id idName
    called on a document object

document.getElementsByClassName('className')
    returns an HTML Collection (array like object)
               not an array
    returns all elements having class className
    called on document object

document.getElementsByTagName('tagName')
    called on document object
    returns an HTML Collection (array like object)
               not an array
    returns all tags named tagName

$0
    returns the last element you hover on
    let element = $0
    
document.querySelector
    document.querySelector('#idName')
    document.querySelector('.className')
        returns first object (element) only
    document.querySelector('tagName')
        returns first object (element) only

document.querySelectorAll
    document.querySelectorAll('.className')
        returns all objects (HTML Collection)
    document.querySelectorAll('tagName')
        returns all objects (HTML Collection)

to update existing content
    element.innerHTML
    element.outerHTML
    element.textContent
    element.innerText

    element.inmerHTML
        returns all HTML content inside that html as a text
        returns with render (< -> &lt;)
        to get an element and all of its descendent elements HTML content
        to set an element HTML content

    element.outerHTML

    element.textContent
        returns without render (tags will also be treated as text)
        will also return elements having display hidden

    element.innerText
        returns without render (tags will also be treated as text)
        will not return elements having display hidden

creating a new element
    document.createElement('tagname')
        to create new element
        let newPara = document.createElement(p);
    
adding new element
    element.appendChild(element2);
        add element2 at the end inside element

creating a text node
    document.createTextNode('text');

inserting element2 having text 'text' in element 
    not good way
        element2 = document.createElement('tagName');
        str = document.createTextNode('text');
        element2.append(str);
        element.append(element2);
    good way
        alternate of createTextNode
        element2 = document.createElement('tagName');
        element.textContent = 'text';
        element.append(element2);

insert element2 in element in any position
    element.insertAdjacentElement('where', element2);
        where->     beforeBegin    afterBegin    beforeEnd    afterEnd

to find parentElement
    parentElement = childElement.parent;

delete childElement in parentElement in any position
    parentElement.removeChild(childElement);
    
    if parentElement is not known
    (childElement.parent).remove(childElement);

    
css specificity
    inline > 

access style of an element
    element.style.attribute = 'value';
        content.style.backgroundColor = 'green';
    can style only 1 property at a time

element.style.cssText
    content.style.cssText = 'color:green; background-color:yellow; font-size:4em;';
    can style multiple properties at a time

element.setAttribute('attribute', 'value');
    to set attribute name
    element.setAttribute('style', 'color:green; background-color:yellow; font-size:4em;');
    element.setAttribute('id', 'newIdName');

element.className
    returns a string containing all classes and seperated by a space
    let str = element.className;
    let obj = element.className.trim().split(' ');

element.classList
    let obj = element.classList;
    returns a object containing all classes
    methods in element.classList
        add();
        remove();
        toggle();               add if not present, remove if already present
        contains();             returns true if present, false otherwise



JS [DOM MANIPULATION + MODERN JS] - CLASS 2

browser events
    announcement
    brouser sends the event

monitorEvents(element);
    to watch events that triggrers / fires on this element

unmonitorEvents(element);
    to stop watching events that triggrers / fires on this element

interface
    blueprint (like classes in C++)

Event Target
    top level entity (interface)
    interface implementd by ibjects that can recieve events and may have listeners for them
    3 methods
        .addEventListener()
        .removeEventListener()
        .dispatchEvent()
    Event Target <- node <- element
        node is inherited by Event Target
        node has properties of Event Target
        element has properties of node and Event Target
        
eventListener
    provide functionality for any event occuring

target.addEventListener('event', function definition / functionName)
    listen / hook into / respond to event
    target -> to which element you want to apply listener
    function -> define what to do when event happens
    element.addEventListener('click', function (){
        console.log('I clicked here');
        element.style.background = 'red';
    });

    let content = document.querySelectorAll('p');
    content.forEach(function (element){
    element.addEventListener('click', function(){
            element.style.background = 'yellow';
        });
    });

type cohersion
    when js will try to convert the items being compared to same type
    1 == '1'    true
        allows type cohersion
    1 === '1'   true
        prevent type cohersion

target.removeEventListener('event', functionName)
    function should be same object that applied on .addEventListener()
    so add and remove event listeners by making seperate function outside the listeners
    conditions to remove
        same target
        same type ('event')
        same function

phases of event
    capturing phase
        search the target
    at target phase
        when find out the target
    bubbling phase
        go back after finding the target
        by default event listener starts here

addEventListener('event', function, useCaptureValue);
    if useCaptureValue =true
        event listener starts from capturing phase now

event object
    has much knowledge about that event
    when event occurs, function in addEventListener gets event object
    content.addEventListener('click', function(event){
        console.log(event);
    });

Default Action

event.preventDefault()
    prevents the default action of an element
    used inside function in addEventListener
    thirdLink.addEventListener('click', function(event){
        event.preventDefault();
    });

event.target
    where event occurs

event.target.nodeName
    returns string of name of node in uppercase

DOM Content Loaded
    event type when all content loaded



JS [DOM MANIPULATION + MODERN JS] - CLASS 3

performance.now()
    very accurate
    shows time taken till that line of code

reflow
    calculations after updatation in document
    very intensive task, takes much time

repaint
    show everything pixel by pixel in your browser
    takes less time than reflow

good practice
    less reflow and repaint

document fragment
    lightweight document object
    no reflow and repaint while updating elements in document fragment
    1 reflow and 1 repaint if we add this in document object


single threading
    process one command at a time
    js is single threaded language

nature of code of js
    run to completion nature of code
    doesnot execute multiple lines / functions at the same time

call stack
    stores function
    new entry will made for every function call and remove after execution

synchronous execution
    no waiting
    occuring immediately
    event listener is NOT synchronous
        jha likha hai vhi chalna start nhi hoga

event loop
    use of call stack, browser and event queue
    simple functions -> call stack -> empty after execution
    asynchronous code is execute using event loop 
        (asynchronous code) event listener -> call stack -> browser handle this -> event queue (if event triggers) -> call stack (if call stack is empty) -> function in event listener will execute
        (asynchronous code) setTimeout -> call stack -> browser handle this -> event queue (after minimum delay) -> call stack (if call stack is empty) -> function in setTimeout will execute
    asynchronous code is handle by browser
    watch philip robert event loop video in youtube
        search loupe in google

setTimeOut(function, minimum time delay before execution in milliseconds)
    browser puts that function in event queue after minimum time delay
    minimum because it is asynchronous and call stack can be filled for much time
    setTimeout(function(){
        console.log('Hello Everyone')
    }, 2000);
    console.log('hi Everyone')

    if minimum time delay is 0, it will also go in the event loop, so no immediate function
        VERY INPORTANT
        medium article, stack overflow ans, mdn documentation, robert philip video
            https://medium.com/swlh/playing-with-javascript-settimeout-11201cd0d0c
        setTimeout(function(){
            console.log('Hello Everyone')
        }, 0);
        used whenever you are trying to defer(talna) something until the stack is clear
        



JS [DOM MANIPULATION + MODERN JS] - CLASS 3
VERY IMPORTANT

asynchronous execution
    ho jayega, pr pta nhi kitna time lega
    done by event loop
    
API
    application programming interface
    mediater / connecting body between 2 softwares over network call
    establish communication
    get, post, put, delete call

features of asynchronous code
    clean and concise
    better error handling
    easier debugging
    1 more, find out in homework

promise
    best way for parallel execution (asynchronous code) in js in background
    time not decided
    can handle successful and failed states
    3 states - pending, fulfilled and rejected
    let p = new Promise(callback-function(resolve, reject){
        resolve(2233);
        reject(new Error('Bhaishahab error aaye hain'));
    });
    resolve
        successful execution
    reject
        for error throwing
    2 methods
        used if you want to do something after ending of execution of promise
            promise chaining
        p.then(callback function(value){})
        p.catch(callback function(error){})
        p.then(callback function(value){} , callback function(error){})
    best practice to execute asynchronous code (in background)


async-await
    used to work with promises
    async
        async function always returns promise
        for promise chaining
            for multiple p.then()
            used if you want to do something after ending of execution of promise
        for network call and calling async function
    await
        for network call or to convert into json
        below code line will not execute until , current doesnot execute complately
        let hM = await hydMosam;

fetch API
    to send / retrieve data over network
    returns a promise
    let content = fetch('url');
    let content = fetch('url', options object for authentication / post-call);

json
    javascript object notation

json formatter
    for formatting json

closures (IMP)
    top level entity containing function and reference (not copy) of all data related / req for that function
    for utilising the nested function outside the function

